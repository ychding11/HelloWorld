#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <cassert>
using namespace std;

#define BUFSIZE 1024
#define LINE_TO_STRING(x) #x 
#define FILE_AND_LINE (__FILE__":"LINE_TO_STRING(__LINE__)) 

#define PERFORMANCE_METER

typedef enum tagLogLevel
{
LOG_LEVEL_ERR,
LOG_LEVEL_INFO,
LOG_LEVEL_DBG,
LOG_LEVLE_ALL,
} LogLevel;

LogLevel gCurLoglevel = LOG_LEVLE_ALL;

#define LOG_D(fmt, ...)  do { if (gCurLoglevel >= LOG_LEVEL_DBG) fprintf(stdout,"[ DEBUG ] "fmt,##__VA_ARGS__ ); } while(0)
#define LOG_E(fmt, ...)  do { if (gCurLoglevel >= LOG_LEVEL_ERR) fprintf(stdout,"[ ERROR ] "fmt,##__VA_ARGS__ ); } while(0)
#define LOG_I(fmt, ...)  do { if (gCurLoglevel >= LOG_LEVEL_INFO) fprintf(stdout,"[ INFO ] "fmt,##__VA_ARGS__ ); } while(0)

typedef unsigned char uint8_t;
typedef unsigned int uint32_t;

typedef int DataType;

#define DATA_SET_SIZE (50 * 10000)
int gRawDataSet[DATA_SET_SIZE];
int gDataSetCount = 0;

void prepare_random_data()
{	LOG_I("+[ %s ]\n", __FUNCTION__);
	#ifdef PERFORMANCE_METER
	time_t tm1, tm2;
	time(&tm1); /* get current time */
	#endif
	for (int i = 0; i < DATA_SET_SIZE; i++ )
	{
		srand(time(NULL));
		gRawDataSet[i] = rand();
	}
	#ifdef PERFORMANCE_METER
	time(&tm2);
	double seconds = difftime(tm2, tm1); /* return double */
	printf("[Prepare data time] = %.lf seconds!\n", seconds);
	#endif
	LOG_I("-[ %s ]\n", __FUNCTION__);
}

static bool is_sorted(DataType a[], int n)
{
	assert(a != NULL && n > 1);
	for (int i = 0; i < n - 1; i++)
	{	if (a[i] > a[i + 1]) return false;
	}
	return true;
}

static void swap(DataType &a, DataType &b)
{
	a = a ^ b;
	b = a ^ b;
	a = a ^ b;
}

void simple_insert_sort(DataType a[], int n)
{
	LOG_I("+[ %s ]\n", __FUNCTION__);
	int i, j;
	assert(a != NULL && n > 1);
	#ifdef PERFORMANCE_METER
	time_t tm1, tm2;
	time(&tm1); /* get current time */
	#endif
	/* do sorting here */
	for (j = 1; j < n; j++)
	{
		DataType temp = a[j];
		for (i = j - 1; i >= 0; i--)
		{	/* find a right place for a[j] */
			if (temp < a[i])
			{	a[i + 1] = a[i];  }
			else
			{	break;	}
		}
		a[i] = temp;
	}
	#ifdef PERFORMANCE_METER
	time(&tm2);
	double seconds = difftime(tm2, tm1); /* return double */
	printf("[Simple insert sort time] = %.lf seconds!\n", seconds);
	#endif
	LOG_I("-[ %s ]\n", __FUNCTION__);
}

void bubble_sort(DataType a[], int n)
{
	LOG_I("+[ %s ]\n", __FUNCTION__);
	int i, j;
	assert(a != NULL && n > 1);
	#ifdef PERFORMANCE_METER
	time_t tm1, tm2;
	time(&tm1); /* get current time */
	#endif
	/* do sorting here */
	int sorted = 0;
	for (i = n - 1; !sorted && i > 0; i--)
	{
		sorted = 1; 
		for (j = 0; j < i; j++)
		{
			if (a[j] > a[j + 1]) 
			{
				swap(a[j], a[j + 1]);
				sorted = 0;

			}
		}
	}
	#ifdef PERFORMANCE_METER
	time(&tm2);
	double seconds = difftime(tm2, tm1); /* return double */
	printf("[bubble sort time] = %.lf seconds!\tsorted %d elements!\n", seconds, n);
	#endif
	LOG_I("-[ %s ]\n", __FUNCTION__);

}

/* this is an internal function which cannot called from outside
 * so no need to check parameters
 */
static void partition(DataType a[], int p, int q)
{
	int i, j;
	if (q - p < 2) return;
	DataType target = a[p]; /* target may be selected by random */
	i = p, j = q + 1;  /* [p, i] <= target, [j, inf] > target*/
	do{
		do {i++;} while(i <= q && a[i] <= target);
		do {j--;} while(a[j] > target);
		if (i != j) swap(a[i], a[j]);
	}while(i < j);
	a[i] = target;
	partition(a, p, i - 1);
	partition(a, i + 1, q);
}

void quick_sort(DataType a[], int n)
{
	LOG_I("+[ %s ]\n", __FUNCTION__);
	int i, j;
	assert(a != NULL && n > 1);
	#ifdef PERFORMANCE_METER
	time_t tm1, tm2;
	time(&tm1); /* get current time */
	#endif
	/* do sorting here */
	
	#ifdef PERFORMANCE_METER
	time(&tm2);
	double seconds = difftime(tm2, tm1); /* return double */
	printf("[quick sort time] = %.lf seconds!\tsorted %d elements!\n", seconds, n);
	#endif
	LOG_I("-[ %s ]\n", __FUNCTION__);
}
/* generate m distinct random number in [0, n) scope 
 * rand(): Returns a pseudo-random integral number in the range between 0 and RAND_MAX
 * This number is generated by an algorithm that returns a sequence of apparently non-related numbers each time it is called. 
 * This algorithm uses a seed to generate the series, which should be initialized to some distinctive value using function srand.
 * http://www.cplusplus.com/reference/cstdlib/rand/?kw=rand  for details.
 * 
 * double difftime (time_t end, time_t beginning); Calculates the difference in seconds between beginning and end.
 * this is an inexact method to meter the performance!
 */
void gen_distinct_rand(int m, int n)
{
	int i, j;
	LOG_I("+[ %s ]\n", __FUNCTION__);
	#ifdef PERFORMANCE_METER
	time_t tm1, tm2;
	time(&tm1); /* get current time */
	#endif
	for (i = 0; i < n; i++)
	{	
		srand(time(NULL)); /* initialize random seed */
		if (rand() % (n - i) < m)
		{	
			gRawDataSet[gDataSetCount++] = i; 
			printf("%u\n", i); 
			m--;
		}
	}
	#ifdef PERFORMANCE_METER
	time(&tm2);
	double seconds = difftime(tm2, tm1); /* return double */
	printf("[Run time] %.lf s!\n", seconds);
	#endif
	LOG_I("-[ %s ]\n", __FUNCTION__);
}


int main(int argc, char** argv)
{
  int m, n;
  LOG_I("+[ %s ]\n", __FUNCTION__);
  printf("%s\n",FILE_AND_LINE);
  if (argc != 3)
  {
    	printf("usage error!\n"
		"%s m n \n", argv[0]); 
   	 return -1;
  }
	m = atoi(argv[1]);
	n = atoi(argv[2]);
	LOG_D("%d\t%d\n", m, n);
  	//gen_distinct_rand(m, n);
	prepare_random_data();
	simple_insert_sort(gRawDataSet, DATA_SET_SIZE);
 	printf("Is Sorted ?  %d\n", is_sorted(gRawDataSet,DATA_SET_SIZE));

	prepare_random_data();
	bubble_sort(gRawDataSet, DATA_SET_SIZE);
 	printf("Is Sorted ?  %d\n", is_sorted(gRawDataSet,DATA_SET_SIZE));

	prepare_random_data();
	quick_sort(gRawDataSet, DATA_SET_SIZE);
 	printf("Is Sorted ?  %d\n", is_sorted(gRawDataSet,DATA_SET_SIZE));

  LOG_I("-[ %s ]\n", __FUNCTION__);
  return 0;
}

